import os
import json
from datetime import datetime
from .base_tool import BaseTool

class WriteOutputTool(BaseTool):
    """Tool for writing orchestrator output to markdown files"""
    
    def __init__(self, config):
        super().__init__()
        self.output_dir = config.get('output', {}).get('directory', 'outputs')
        
    @property
    def name(self) -> str:
        return "write_output"
    
    @property
    def description(self) -> str:
        return "Write orchestrator output to a markdown file while displaying in terminal"
    
    @property
    def parameters(self) -> dict:
        return {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The original user query"
                },
                "result": {
                    "type": "string", 
                    "description": "The orchestrator result to write"
                },
                "filename": {
                    "type": "string",
                    "description": "Optional custom filename (without extension)"
                }
            },
            "required": ["query", "result"]
        }
    
    def execute(self, query, result, filename=None):
        """Write the orchestrator output to a markdown file"""
        try:
            # Create output directory if it doesn't exist
            os.makedirs(self.output_dir, exist_ok=True)
            
            # Generate filename if not provided
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                # Clean query for filename (remove special characters)
                clean_query = "".join(c for c in query[:50] if c.isalnum() or c in (' ', '-', '_')).strip()
                clean_query = clean_query.replace(' ', '_')
                filename = f"{timestamp}_{clean_query}"
            
            # Ensure .md extension
            if not filename.endswith('.md'):
                filename += '.md'
            
            filepath = os.path.join(self.output_dir, filename)
            
            # Create markdown content
            timestamp_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            markdown_content = f"""# Orchestrator Output

**Generated:** {timestamp_str}  
**Query:** {query}

---

## Result

{result}

---

*Generated by Make It Heavy Multi-Agent Orchestrator*
"""
            
            # Write to file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return {
                "success": True,
                "message": f"Output saved to {filepath}",
                "filepath": filepath,
                "filename": filename
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to write output: {str(e)}"
            }